{"version":3,"sources":["actions/common.js","components/main.jpg","components/slider.js","components/landing.js","home.js","components/privacy.js","reducers/user.js","reducers/common.js","reducers/index.js","store/store.js","components/loader.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","loading","status","type","payload","Sliderr","Landing","className","src","logo","alt","Component","connect","state","user","common","Home","Privacy","href","initialState","name","combineReducers","action","middleware","thunk","logger","store","createStore","rootReducer","applyMiddleware","props","c","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAUAA,EAAOC,QAAU,CAAEC,QAVL,SAACC,GACX,MAAO,CACHC,KAAO,UACPC,QAAUF,M,mBCHlBH,EAAOC,QAAU,IAA0B,kC,uSCE5B,SAASK,IACpB,OACI,8B,qBCIFC,G,uLAEE,OACI,6BACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,eACX,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,eAEzC,kBAACF,EAAD,Y,GAREM,cAsBPC,eANS,SAAAC,GAAK,MAAK,CAC9BC,KAAOD,EAAMC,KACbC,OAASF,EAAME,UAIoB,CACnCd,mBADWW,CAEZN,GC3BGU,G,oOAOE,OACI,yBAAKT,UAAU,eACX,kBAAC,EAAD,W,GATGI,cAoBJC,eALS,SAAAC,GAAK,MAAK,CAC9BC,KAAOD,EAAMC,QAIsB,GAAxBF,CAEZI,G,MCxBY,SAASC,IACpB,OACI,yBAAKV,UAAU,qBACX,2DAEA,8QAEA,+LAEA,yCAEA,2oBAEA,uDAEA,uXAIA,gDAEA,yLAA8J,uBAAGW,KAAK,2CAAR,4BAA9J,KAEA,0eAEA,0OAEA,0IAEA,4DAEA,yaAEA,uQAEA,sDAEA,sOAEA,oWAEA,0DAEA,0TAEA,uCAEA,qI,smBClDZ,IAAMC,EAAe,CACjBC,KAAO,S,yjBCDX,IAAMD,EAAe,CACjBlB,SAAU,GCGCoB,cAAgB,CAC3BP,KFDW,WAAkC,IAAjCD,EAAgC,uDAAxBM,EAAcG,EAAU,uCAC5C,OAAOA,EAAOnB,MACV,IAAK,cACD,OAAO,EAAP,GACOU,EADP,CAEIO,KAAOE,EAAOlB,UAEtB,QACI,OAAOS,IENfE,ODFW,WAAkC,IAAjCF,EAAgC,uDAAxBM,EAAcG,EAAU,uCAC5C,OAAOA,EAAOnB,MACV,IAAK,UACD,OAAO,KACAU,EADP,CAEIZ,QAAUqB,EAAOlB,UAEzB,QACI,OAAOS,MELbU,EAAW,CAACC,IAAMC,KAUTC,EAPDC,YACVC,EALe,GAOfC,IAAe,WAAf,EAAmBN,I,MCavB,IAKeX,eALS,SAAAC,GAAK,MAAK,CAC9BE,OAASF,EAAME,UAIoB,CACnCd,mBADWW,EA1Bf,SAAgBkB,GACZ,IAAIC,EAAI,gBAQR,OANGD,EAAMf,OAAOd,QACZ8B,GAAQ,WAGRA,GAAQ,aAGR,6BACI,yBAAKxB,UAAWwB,GACZ,yBAAKxB,UAAU,gBACX,yBAAKA,UAAU,eAAc,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,qCCNtJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCKD,WACb,OACE,kBAAC,IAAD,CAAUZ,MAAOA,GACf,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAMa,SAAP,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,iBAAiBC,UAAWzB,SDZxC,MAAS0B,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6089df67.chunk.js","sourcesContent":["let loading = (status) =>{\r\n    return {\r\n        type : \"LOADING\",\r\n        payload : status\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nmodule.exports = { loading }","module.exports = __webpack_public_path__ + \"static/media/main.29212f5e.jpg\";","import React from 'react';\r\n\r\nexport default function Sliderr() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { loading } from \"../actions/common\";\r\nimport Sliderr from \"./slider\";\r\nimport logo from \"./main.jpg\";\r\nimport \"./landing.css\";\r\n\r\n\r\nclass Landing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"loading-page-inner\">\r\n                    <div className=\"logo-holder\">\r\n                        <img src={logo} alt=\"Logo\" className=\"logo-main\"/>\r\n                    </div>\r\n                    <Sliderr />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    user : state.user,\r\n    common : state.common\r\n});\r\n  \r\n  \r\nexport default connect(mapStateToProps,{\r\n    loading\r\n})(Landing);","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport Landing from \"./components/landing\";\r\nimport \"./home.css\";\r\n\r\nclass Home extends Component{\r\n    \r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"home-wraper\">\r\n                <Landing />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user : state.user\r\n});\r\n  \r\n  \r\nexport default connect(mapStateToProps,{\r\n\r\n})(Home);\r\n","import React from 'react';\r\nimport \"./privacy.css\";\r\n\r\nexport default function Privacy() {\r\n    return (\r\n        <div className=\"privacy-container\">\r\n            <h1>Privacy Policy for SyncToDo</h1>\r\n\r\n            <p>At SyncToDo, accessible from http://synctodo.herokuapp.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SyncToDo and how we use it.</p>\r\n\r\n            <p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us through email at kirankumardas224@gmail.com</p>\r\n\r\n            <h2>Log Files</h2>\r\n\r\n            <p>SyncToDo follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\r\n\r\n            <h2>Cookies and Web Beacons</h2>\r\n\r\n            <p>Like any other website, SyncToDo uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\r\n\r\n\r\n\r\n            <h2>Privacy Policies</h2>\r\n\r\n            <p>You may consult this list to find the Privacy Policy for each of the advertising partners of SyncToDo. Our Privacy Policy was created with the help of the <a href=\"https://www.privacypolicygenerator.info\">Privacy Policy Generator</a>.</p>\r\n\r\n            <p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SyncToDo, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\r\n\r\n            <p>We ask for acess to the user's google drive access, but it's limited to the files that the application creates. We are do not access or ask for the permission to any other files or folders in your drive.</p>\r\n\r\n            <p>Note that SyncToDo has no access to or control over these cookies that are used by third-party advertisers.</p>\r\n\r\n            <h2>Third Party Privacy Policies</h2>\r\n\r\n            <p>SyncToDo's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. You may find a complete list of these Privacy Policies and their links here: Privacy Policy Links.</p>\r\n\r\n            <p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites. What Are Cookies?</p>\r\n\r\n            <h2>Children's Information</h2>\r\n\r\n            <p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\r\n\r\n            <p>SyncToDo does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>\r\n\r\n            <h2>Online Privacy Policy Only</h2>\r\n\r\n            <p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SyncToDo. This policy is not applicable to any information collected offline or via channels other than this website.</p>\r\n\r\n            <h2>Consent</h2>\r\n\r\n            <p>By using our website, you hereby consent to our Privacy Policy and agree to its Terms and Conditions.</p>\r\n        </div>\r\n    )\r\n}\r\n","const initialState = {\r\n    name : \"Kiran\"   \r\n}\r\n\r\nexport default (state = initialState, action )=>{\r\n    switch(action.type){\r\n        case 'CHANGE_NAME':\r\n            return {\r\n                ...state,\r\n                name : action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","const initialState = {\r\n    loading : false   \r\n}\r\n\r\nexport default (state = initialState, action )=>{\r\n    switch(action.type){\r\n        case 'LOADING':\r\n            return {\r\n                ...state,\r\n                loading : action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux'; \r\nimport User from './user';\r\nimport Common from './common';\r\n\r\nexport default combineReducers({\r\n    user : User,\r\n    common : Common  \r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from \"redux-logger\";\r\nimport rootReducer from '../reducers/index';\r\n\r\n\r\nconst initialState={};\r\nconst middleware=[thunk,logger];\r\n\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    applyMiddleware(...middleware)\r\n);\r\n\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport \"./loader.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { loading } from \"../actions/common\";\r\n\r\nfunction Loader(props) {\r\n    let c = \"LoaderWrapper\";\r\n    //console.log(props.common.loading);\r\n    if(props.common.loading){\r\n        c = c + \" visible\";\r\n    }\r\n    else{\r\n        c = c + \" invisible\";\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={c}>\r\n                <div className=\"loader-inner\">\r\n                    <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    common : state.common\r\n});\r\n  \r\n  \r\nexport default connect(mapStateToProps,{\r\n    loading\r\n})(Loader);\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {BrowserRouter,Route} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Home from './home';\nimport Privacy from \"./components/privacy\";\nimport store from './store/store';\nimport Loader from \"./components/loader\";\n\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Loader />\n      <BrowserRouter>\n        <React.Fragment>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/privacypolicy\" component={Privacy} />\n        </React.Fragment>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\n"],"sourceRoot":""}